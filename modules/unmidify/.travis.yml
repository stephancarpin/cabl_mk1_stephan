language: cpp
sudo: false

matrix:
  include:

    - os: linux
      compiler: clang
      addons: &clang37
        apt:
          sources: ['llvm-toolchain-precise-3.7', 'ubuntu-toolchain-r-test']
          packages: ['clang-3.7', 'gfortran']
      env: CXX_COMPILER='clang++-3.7' C_COMPILER='clang-3.7' Fortran_COMPILER='gfortran' BUILD_TYPE='Release'

    - os: linux
      compiler: clang
      addons: *clang37
      env: CXX_COMPILER='clang++-3.7' C_COMPILER='clang-3.7' Fortran_COMPILER='gfortran' BUILD_TYPE='Debug'


    - os: linux
      compiler: clang
      addons: &clang38
        apt:
          sources: ['llvm-toolchain-precise-3.8', 'ubuntu-toolchain-r-test']
          packages: ['clang-3.8', 'gfortran']
      env: CXX_COMPILER='clang++-3.8' C_COMPILER='clang-3.8' Fortran_COMPILER='gfortran' BUILD_TYPE='Release'

    - os: linux
      compiler: clang
      addons: *clang38
      env: CXX_COMPILER='clang++-3.8' C_COMPILER='clang-3.8' Fortran_COMPILER='gfortran' BUILD_TYPE='Debug'


    # 2/ Linux GCC Builds
    - os: linux
      compiler: gcc
      addons: &gcc49
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.9', 'gcc-4.9', 'gfortran-4.9']
      env: CXX_COMPILER='g++-4.9' C_COMPILER='gcc-4.9' Fortran_COMPILER='gfortran-4.9' BUILD_TYPE='Release'

    - os: linux
      compiler: gcc
      addons: *gcc49
      env: CXX_COMPILER='g++-4.9' C_COMPILER='gcc-4.9' Fortran_COMPILER='gfortran-4.9' BUILD_TYPE='Debug'


    - os: linux
      compiler: gcc
      addons: &gcc5
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-5', 'gcc-5', 'gfortran-5']
      env: CXX_COMPILER='g++-5' C_COMPILER='gcc-5' Fortran_COMPILER='gfortran-5' BUILD_TYPE='Release'

    - os: linux
      compiler: gcc
      addons: *gcc5
      env: CXX_COMPILER='g++-5' C_COMPILER='gcc-5' Fortran_COMPILER='gfortran-5' BUILD_TYPE='Debug'


    # 3/ OSX Clang Builds
    - os: osx
      osx_image: xcode6.4
      compiler: clang
      env: CXX_COMPILER='clang++' C_COMPILER='clang' Fortran_COMPILER='gfortran' BUILD_TYPE='Debug'

    - os: osx
      osx_image: xcode6.4
      compiler: clang
      env: CXX_COMPILER='clang++' C_COMPILER='clang' Fortran_COMPILER='gfortran' BUILD_TYPE='Release'


    - os: osx
      osx_image: xcode7
      compiler: clang
      env: CXX_COMPILER='clang++' C_COMPILER='clang' Fortran_COMPILER='gfortran' BUILD_TYPE='Debug'

    - os: osx
      osx_image: xcode7
      compiler: clang
      env: CXX_COMPILER='clang++' C_COMPILER='clang' Fortran_COMPILER='gfortran' BUILD_TYPE='Release'


    # 4/ OSX GCC5 Builds
    - os: osx
      osx_image: xcode6.4
      compiler: gcc
      env: BUILD_TYPE='Debug'

    - os: osx
      osx_image: xcode6.4
      compiler: gcc
      env: BUILD_TYPE='Release'


    - os: osx
      osx_image: xcode7
      compiler: gcc
      env: CXX_COMPILER='g++-5' C_COMPILER='gcc-5' Fortran_COMPILER='gfortran' BUILD_TYPE='Debug'

    - os: osx
      osx_image: xcode7
      compiler: gcc
      env: CXX_COMPILER='g++-5' C_COMPILER='gcc-5' Fortran_COMPILER='gfortran' BUILD_TYPE='Release'

install:
  ############################################################################
  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  ############################################################################
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}

  ############################################################################
  # Install a recent CMake
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="http://www.cmake.org/files/v3.3/cmake-3.3.2-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
      echo "The compiler is: ${CXX_COMPILER}"
      echo "The CMake path is: ${DEPS_DIR}/cmake/bin"
      CMAKE_EXECUTABLE=${DEPS_DIR}/cmake/bin/cmake
    else
      brew install cmake
      CMAKE_EXECUTABLE=cmake
    fi

  ############################################################################
  # Install a recent Doxygen
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      DOXYGEN_URL="http://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.10.linux.bin.tar.gz"
      mkdir doxygen && travis_retry wget --quiet -O - ${DOXYGEN_URL} | tar --strip-components=1 -xz -C doxygen
      export PATH=${DEPS_DIR}/doxygen/bin:${PATH}
    else
      brew install doxygen
    fi

  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew install gcc
    fi

  ############################################################################
  # Install libc++ and libc++abi (on Linux only; Xcode uses libc++ by default)
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" && "${CXX_COMPILER}" == clang* ]]; then
      if   [[ "${CXX_COMPILER}" == "clang++-3.5" ]]; then LLVM_VERSION="3.5.2"
      elif [[ "${CXX_COMPILER}" == "clang++-3.6" ]]; then LLVM_VERSION="3.6.2";
      elif [[ "${CXX_COMPILER}" == "clang++-3.7" ]]; then LLVM_VERSION="3.7.0";
      elif [[ "${CXX_COMPILER}" == "clang++-3.8" ]]; then LLVM_VERSION="3.8.0";
      else                                            LLVM_VERSION="trunk"; fi
      if [[ "${LLVM_VERSION}" != "trunk" ]]; then
        LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
        TAR_FLAGS="-xJ"
      else
        LLVM_URL="https://github.com/llvm-mirror/llvm/archive/master.tar.gz"
        LIBCXX_URL="https://github.com/llvm-mirror/libcxx/archive/master.tar.gz"
        LIBCXXABI_URL="https://github.com/llvm-mirror/libcxxabi/archive/master.tar.gz"
        TAR_FLAGS="-xz"
      fi
      mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
      travis_retry wget --quiet -O - ${LLVM_URL} | tar --strip-components=1 ${TAR_FLAGS} -C llvm
      travis_retry wget --quiet -O - ${LIBCXX_URL} | tar --strip-components=1 ${TAR_FLAGS} -C llvm/projects/libcxx
      travis_retry wget --quiet -O - ${LIBCXXABI_URL} | tar --strip-components=1 ${TAR_FLAGS} -C llvm/projects/libcxxabi
      (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_DIR}/llvm/install -DCMAKE_CXX_COMPILER=clang++)
      (cd llvm/build/projects/libcxx && make install -j2)
      (cd llvm/build/projects/libcxxabi && make install -j2)
      export CXXFLAGS="-isystem ${DEPS_DIR}/llvm/install/include/c++/v1"
      export LDFLAGS="-L ${DEPS_DIR}/llvm/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm/install/lib"
    fi


#    # 5/ Linux GCC5 Coverage build
#    - os: linux
#      compiler: gcc
#      addons: *gcc5
#      env: CXX_COMPILER='g++-5' C_COMPILER='gcc-5' Fortran_COMPILER='gfortran-5' BUILD_TYPE='Debug' COVERAGE=true

before_script:
  - export CXX=${CXX_COMPILER}
  - export CC=${C_COMPILER}
  - export FC=${Fortran_COMPILER}
  - export PATH=$HOME/.local/bin:/usr/local/bin:/usr/bin:$PATH

script:
  - cd ${TRAVIS_BUILD_DIR}
  - mkdir build
  - cd build
  - CXX=${CXX_COMPILER} CC=${C_COMPILER} FC=${Fortran_COMPILER} $CMAKE_EXECUTABLE .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
  - make -j 2 check
